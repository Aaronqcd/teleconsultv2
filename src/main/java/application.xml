<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:task="http://www.springframework.org/schema/task"
xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task-3.0.xsd">

     <!-- 引入jdbc配置文件 -->  
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
               <value>classpath:properties/*.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>
        </property>
    </bean>

	<import resource="classpath:spring-redis.xml"/>
    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <!-- 不使用properties来配置 -->
        <!-- <property name="driverClassName" value="com.mysql.jdbc.Driver" /> <property name="url" value="jdbc:mysql://localhost:3306/learning" /> <property name="username" value="root" /> <property name="password" value="christmas258@" /> -->
       <!-- 使用properties来配置 -->
        <property name="driverClassName">
            <value>${jdbc_driverClassName}</value>
        </property>
        <property name="url">
            <value>${jdbc_url}</value>
        </property>
        <property name="username">
            <value>${jdbc_username}</value>
        </property>
        <property name="password">
            <value>${jdbc_password}</value>
        </property>
    </bean>

    <!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.va.removeconsult.dao" />
    </bean>

    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->
    
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.va.removeconsult.clouddisk.model"/>
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml" /> 
    </bean>

    <!-- 自动扫描注解的bean -->
    <context:component-scan base-package="com.va.removeconsult" />
	<context:component-scan base-package="asr.realtime" />
	<task:annotation-driven executor="taskExecutor" scheduler="taskScheduler"/>  
    <task:executor id="taskExecutor" pool-size="5"/>  
    <task:scheduler id="taskScheduler" pool-size="10" />
    
    <!-- 发送邮件 -->
    <bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">  
     <property name="host">  
      <value>${mail.host}</value>  
     </property>  
     <property name="javaMailProperties">  
            <props>  
              <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
	          <prop key="mail.smtp.socketFactory.port">465</prop>
	          <prop key="mail.smtp.port">465</prop>
              <prop key="mail.smtp.auth">true</prop>  
              <prop key="smtp.starttls.enable">true</prop>  
              <prop key="smtp.starttls.required">true</prop>  
              <prop key="mail.smtp.timeout">25000</prop>  
            </props>  
      </property>
     <property name="username">  
      <value>${mail.username}</value>  
     </property>
     <property name="password">  
      <value>${mail.password}</value>  
     </property> 
     <property name="defaultEncoding">  
      <value>UTF-8</value>  
     </property> 
    </bean>
    <bean id="gson" class="com.google.gson.Gson" />  
    
    <bean id="globalUserWebsocketSessionManager" class="com.va.removeconsult.websocket.session.GlobalUserWebsocketSessionManager" />
    <bean id="mettingUserWebsocketSessionManager" class="com.va.removeconsult.websocket.session.MettingUserWebsocketSessionManager" />
    <bean id="userWebsocketSessionManager" class="com.va.removeconsult.websocket.session.UserWebsocketSessionManager" />
     
</beans>